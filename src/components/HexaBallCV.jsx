/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, {useState, useRef, useEffect} from 'react'
import {MeshReflectorMaterial, Reflector, Text, useGLTF, useTexture} from '@react-three/drei'
import {Canvas, useFrame, useLoader, useThree} from "@react-three/fiber";
import xr, {useXR} from "@react-three/xr"
import {useSpring, animated, config, useSpringRef, useChain} from "@react-spring/three";
import * as THREE from "three";
import {TextureLoader} from "three";


export default function Model({...props}) {
    props.actif = true;
    const canvas = props.canvas;
    console.log(props.cam);
    //define 3D element
    const hexaBall = useRef()
    const topBall = useRef()
    const downBall = useRef()
    const hexaBadge = useRef()
    const hexaMenu = useRef()
    const hexaBienvenu = useRef()
    const hexaAPropos = useRef()
    const hexaCompetence = useRef()
    const hexaContact = useRef()
    const hexaSkill = useRef()
    const hexaPortfolio = useRef()
    const hexaCV = useRef()
    //define position of text content for each hexagon
    const hexaNormalPos = new THREE.Vector3(-0.05, -0.5, -.3);
    const hexaInvertedPos = new THREE.Vector3(-0.05, 0.5, -.3);
    const hexaNormalPos1L = new THREE.Vector3(-0.05, 0.5, 0.3);
    const hexaNormalPos2L = new THREE.Vector3(-0.05, -0.5, 0.3);
    const hexaInvertedPos2L = new THREE.Vector3(-0.05, 0.5, 0.3);
    const hexaNormalRot = [Math.PI / 2, 0, Math.PI]
    const hexaInvertedRot = [-Math.PI / 2, Math.PI, -Math.PI]
    const axesHelper = new THREE.AxesHelper(5);
    const position1 = useState([3, 2, 2]);

    const [active, setActive] = useState(false);
    const [isBallOpen, setIsBallOpen] = useState(true)
    const [actived, setActived] = useState([])
    const {nodes, materials} = useGLTF('./8B2.glb')
    const { controllers, player, isPresenting } = useXR();


    const ft =useLoader(TextureLoader, './assets/bkg3_front5.png');
    const bk = useLoader(TextureLoader, './assets/bkg3_back6.png');
    const up = useLoader(TextureLoader, './assets/bkg3_top3.png');
    const dn = useLoader(TextureLoader, './assets/bkg3_bottom4.png');
    const rt =useLoader(TextureLoader, './assets/bkg3_right1.png');
    const lf = useLoader(TextureLoader, './assets/bkg3_left2.png');

    function createPathStrings(filename) {


        const fileType = ".png";
        const sides = [ft, bk, up, dn, rt, lf];
        const pathStings = sides.map(side => {
            return side;
        });
        return pathStings;
    }
    let skyboxImage = "purplenebula";
    function createMaterialArray(filename) {
        const skyboxImagepaths = createPathStrings(filename);
        const materialArray = skyboxImagepaths.map(image => {
            let texture = new THREE.TextureLoader().load(image);
            return new THREE.MeshBasicMaterial({ map: texture, side: THREE.BackSide });
        });
        return materialArray;
    }
    function init() {

        const materialArray = createMaterialArray(skyboxImage);

        skybox = new THREE.Mesh(skyboxGeo, materialArray);


    }


    const skybox = useRef();

    player.position.set(0,0,10)
    console.log("props.cam pos " + JSON.stringify( player.position));

    const activate = (e) => {
        setActived(e.target);
        console.log("e" + e.eventObject)
        console.log("e" + e.object)
        console.log("e" + e.target)

        console.log("hexaBienvenuCurren:" + hexaBienvenu.current);
        console.log("active: " + active);
        console.log("activated " + actived)


    }
    const transBadge = useSpringRef()
    const {badgePosition} = useSpring({
        ref: transBadge,
        from: {badgePosition: [0, 0, 0]},
        to: async (next, cancel) => {
            await next({badgePosition: [0, 2, 0]})
        },
        config: config.molasses,
    })

    const transTopBall = useSpringRef()
    const {position} = useSpring({
        ref: transTopBall,
        from: {position: [0, 0, 0]},
        to: async (next, cancel) => {
            await next({position: [0, 3.5, 0]})
        },
        config: config.stiff,
    })

    const transDownBall = useSpringRef()
    const {positionB} = useSpring({
        ref: transDownBall,
        from: {positionB: [0, 0, 0]},
        to: async (next, cancel) => {
            await next({positionB: [0, 3.5, 0]})
        }, delay: 100,
        config: config.stiff,
    })

    const transBall = useSpringRef()
    const {ballPosition} = useSpring({
        ref: transBadge,
        from: {ballPosition: [0, 0, -12]},
        to: async (next, cancel) => {
            await next({ballPosition: [0, -3.5, 0]})
        },
        config: config.molasses,
    })

    const transHexaAProposOut = useSpringRef()
    const {hexaAProposOut} = useSpring({
        ref: transHexaAProposOut,
        from: {hexaAProposOut: [3.28, 0, -0.07]},
        to: async (next, cancel) => {
            await next(active ? {hexaAProposOut: [3.28, 1.5, -0.07]} : {hexaAProposOut: [5.75, 1.5, -0.1]})
            await next(isBallOpen ? {hexaAProposOut: [4.2, 1.5, 0.05]} : {hexaAProposOut: [5.75, 1.5, -0.1]})
        },
        duration: 50,
    })

    const transHexaMenuOut = useSpringRef()
    const {hexaMenuOut} = useSpring({
        ref: transHexaMenuOut,
        from: {hexaMenuOut: [0.03, 0, 3.19]},
        to: async (next, cancel) => {
            await next(active ? {hexaMenuOut: [0.03, 1.5, 3.19]} : {hexaMenuOut: [0.007, 1.5, 5.78]})
            await next(isBallOpen ? {hexaMenuOut: [0.05, 1.5, 4.2]} : {hexaMenuOut: [0.007, 1.5, 5.78]})
        },
        duration: 50,
    })

    const transHexaCompetenceOut = useSpringRef()
    const {hexaCompetenceOut} = useSpring({
        ref: transHexaCompetenceOut,
        from: {hexaCompetenceOut: [2.38, 0, -2.37]},
        to: async (next, cancel) => {
            await next(active ? {hexaCompetenceOut: [2.38, 1.5, -2.37]} : {hexaCompetenceOut: [4., 1.5, -4.2]})
            await next(isBallOpen ? {hexaCompetenceOut: [3, 1.5, -3]} : {hexaCompetenceOut: [4, 1.5, 4.20]})
        },
        duration: 50,
    })

    const transHexaBienvenuOut = useSpringRef()
    const {hexaBienvenuOut} = useSpring({
        ref: transHexaBienvenuOut,
        from: {hexaBienvenuOut: [2.3, 0, 2.24]},
        to: async (next, cancel) => {
            await next(active ? {hexaBienvenuOut: [2.3, 1.5, 2.24]} : {hexaBienvenuOut: [4, 1.5, 4.20]})
            await next(isBallOpen ? {hexaBienvenuOut: [3, 1.5, 3]} : {hexaBienvenuOut: [4, 1.5, 4.20]})
        },
        duration: 50,
    })

    const transHexaSkillOut = useSpringRef()
    const {hexaSkillOut} = useSpring({
        ref: transHexaSkillOut,
        from: {hexaSkillOut: [-3.2, 0, -0.03]},
        to: async (next, cancel) => {
            await next(active ? {hexaSkillOut: [-3.2, 1.5, -0.03]} : {hexaSkillOut: [-5.78, 1.5, 0.07]})
            await next(isBallOpen ? {hexaSkillOut: [-4.2, 1.5, 0.05]} : {hexaSkillOut: [-5.78, 1.5, 0.07]})
        },
        duration: 50,
    })

    const transHexaPortfolioOut = useSpringRef()
    const {hexaPortfolioOut} = useSpring({
        ref: transHexaPortfolioOut,
        from: {hexaPortfolioOut: [-2.22, 0, -2.39]},
        to: async (next, cancel) => {
            await next(active ? {hexaPortfolioOut: [-2.22, 1.5, -2.39]} : {hexaPortfolioOut: [-4.2, 1.5, -4]})
            await next(isBallOpen ? {hexaPortfolioOut: [-3, 1.5, -3]} : {hexaPortfolioOut: [-4.2, 1.5, -4]})
        },
        duration: 50,
    })

    const transHexaContactOut = useSpringRef()
    const {hexaAcquiOut} = useSpring({
        ref: transHexaContactOut,
        from: {hexaAcquiOut: [-2.29, 0, 2.28]},
        to: async (next, cancel) => {
            await next(active ? {hexaAcquiOut: [-2.29, 1.5, 2.28]} : {hexaAcquiOut: [-4.2, 1.5, 4]})
            await next(isBallOpen ? {hexaAcquiOut: [-3, 1.5, 3]} : {hexaAcquiOut: [-4.2, 1.5, 4]})
        },
        duration: 50,
    })

    const transhexaCVOut = useSpringRef()
    const {hexaCVOut} = useSpring({
        ref: transhexaCVOut,
        from: {hexaCVOut: [0.05, 0, -3.29]},
        to: async (next, cancel) => {
            await next(active ? {hexaCVOut: [0.05, 1.5, -3.29]} : {hexaCVOut: [0.07, 1.5, -5.78]})
            await next(isBallOpen ? {hexaCVOut: [0.0, 1.5, -4.2]} : {hexaCVOut: [0.07, 1.5, -5.78]})
        },
        duration: 50,
    })

    useChain([transHexaBienvenuOut,
        transHexaAProposOut,
        transHexaCompetenceOut,
        transhexaCVOut,
        transHexaPortfolioOut,
        transHexaSkillOut,
        transHexaContactOut,
        transHexaMenuOut, transDownBall, transBall], 0, 0)
    useChain([
        transTopBall,
        transBadge], 0, 0.1)

    const handleBadgeClick = useSpringRef();

    const{scale}= useSpring({
        ref: handleBadgeClick,
        from: {
            scale: [0.92, -0.4, 0.92]
        },

        to: async (next, cancel) => {
            await next({scale: [1.1, -0.4, 1.1]})
            await next({scale: [0.92, -0.4, 0.92]})

        },
        config: {
            duration: 500,
        },
        loop: {reverse: true},
    })

    const activatec = (e) => {
        //handleBadgeClick.start();
        rotationSpeed=0;
        document.location = badgeLinkArray[e.object.parent.name];
    }

    const badgeLinkArray= {
        'hexaPortfolio': "/works.html",
        'hexaCV': "/resume.html",
        'hexaAPropos': "/about.html",
        'hexaBienvenu': "/welcome.html",
        'hexaCompetence': "/services.html",
        'hexaMenu': "/index.html",
        'hexaContact': "/contact.html",
        'hexaSkill':  "/testimonials.html"

    }

    //rotation de la sphere
    useFrame(() => {
        hexaBall.current.rotation.y += rotationSpeed;
    });

    let rotationSpeed = 0.01;
    function animate() {
        skybox.rotation.x += 0.005;
        skybox.rotation.y += 0.005;


    }

    return (
        <>
        <boxGeometry ref={skybox} args={[10000, 10000, 10000]} />
        <animated.group ref={hexaBall} {...props} dispose={null} position={ballPosition}>

            <animated.mesh ref={downBall} geometry={nodes.ballDown.geometry} material={nodes.ballDown.material}
                           position={positionB}/>

            <animated.mesh ref={topBall} geometry={nodes.BallTop.geometry} material={nodes.BallTop.material}
                           rotation={[Math.PI, 0, 0]} position={position}
            />
            <animated.group ref={hexaBadge} {...props} position={badgePosition} name={"badges"} dispose={null}>
                <animated.group ref={hexaMenu} name={"hexaMenu"} position={hexaMenuOut}
                                rotation={[-Math.PI / 2, 0, 0]}
                                scale={[-0.97, 0.42, -0.97]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaNormalPos} rotation={hexaNormalRot}>
                        Ce Menu 3D...
                    </Text>
                    <mesh geometry={nodes.Cylindre003.geometry} material={materials['Material.002']}/>
                    <mesh geometry={nodes.Cylindre003_1.geometry} material={materials['Material.003']}/>
                    <mesh geometry={nodes.Cylindre003_2.geometry} material={materials['Material.001']}/>
                </animated.group>
                <fog attach="fog" args={['#ff0000', 1, 40]}/>
                <animated.group ref={hexaBienvenu} name={"hexaBienvenu"} position={hexaBienvenuOut}
                                rotation={[-Math.PI / 2, 0, Math.PI / 4]}
                                scale={[-0.97, 0.42, -0.97]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    {document.Location="/welcome.html";}
                                }}
                >

                    <Text fontSize={0.2} position={hexaNormalPos} rotation={hexaNormalRot}>
                        Bienvenue
                    </Text>

                    <mesh geometry={nodes.Cylindre004.geometry} material={materials['Material.005']}/>
                    <mesh geometry={nodes.Cylindre004_1.geometry} mane='bingo' material={materials['Material.004']}/>
                    <mesh geometry={nodes.Cylindre004_2.geometry} material={materials['Material.006']}/>

                </animated.group>
                <animated.group ref={hexaCompetence} position={hexaCompetenceOut} name={"hexaCompetence"}
                                rotation={[-Math.PI / 2, 0, 2.36]}
                                scale={scale}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaInvertedPos2L} rotation={hexaInvertedRot}>
                        Compétences
                    </Text>
                    <mesh geometry={nodes.Cylindre013.geometry} material={materials['Material.015']}/>
                    <mesh geometry={nodes.Cylindre013_1.geometry} material={materials['Material.014']}/>
                    <mesh geometry={nodes.Cylindre013_2.geometry} material={materials['Material.013']}/>
                </animated.group>
                <animated.group ref={hexaSkill} position={hexaSkillOut} name={"hexaSkill"}
                                rotation={[-Math.PI / 2, 0, -1.57]}
                                scale={[-0.97, 0.42, -0.97]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaNormalPos} rotation={hexaNormalRot}>
                        Skills
                    </Text>
                    <mesh geometry={nodes.Cylindre017.geometry} material={materials['Material.020']}/>
                    <mesh geometry={nodes.Cylindre017_1.geometry} material={materials['Material.021']}/>
                    <mesh geometry={nodes.Cylindre017_2.geometry} material={materials['Material.019']}/>
                </animated.group>
                <animated.group ref={hexaAPropos} position={hexaAProposOut} name={"hexaAPropos"}
                                rotation={[-Math.PI / 2, 0, 1.57]}
                                scale={[-0.97, 0.42, -0.97]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaNormalPos} rotation={hexaNormalRot}>
                        A propos
                    </Text>


                    <mesh geometry={nodes.Cylindre009.geometry} material={materials['Material.008']}/>
                    <mesh geometry={nodes.Cylindre009_1.geometry} material={materials['Material.007']}/>
                    <mesh geometry={nodes.Cylindre009_2.geometry} material={materials['Material.009']}/>
                </animated.group>
                <animated.group ref={hexaContact} position={hexaAcquiOut} name={"hexaContact"}
                                rotation={[-Math.PI / 2, 0, -0.78]} scale={[0.92, -0.4, 0.92]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaInvertedPos2L} rotation={hexaInvertedRot}>
                        Contact
                    </Text>
                    <mesh geometry={nodes.Cylindre016.geometry} material={materials['Material.016']}/>
                    <mesh geometry={nodes.Cylindre016_1.geometry} material={materials['Material.017']}/>
                    <mesh geometry={nodes.Cylindre016_2.geometry} material={materials['Material.018']}/>
                </animated.group>
                <animated.group ref={hexaPortfolio} position={hexaPortfolioOut} name={"hexaPortfolio"}
                                rotation={[-Math.PI / 2, 0, -2.36]}
                                scale={[0.92, -0.4, 0.92]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e);
                                }}>
                    <Text fontSize={0.2} position={hexaNormalPos1L} rotation={hexaInvertedRot}>
                        Portfolio
                    </Text>
                    <mesh geometry={nodes.Cylindre022.geometry} material={materials['Material.022']}/>
                    <mesh geometry={nodes.Cylindre022_1.geometry} material={materials['Material.024']}/>
                    <mesh geometry={nodes.Cylindre022_2.geometry} material={materials['Material.023']}/>
                </animated.group>
                <animated.group ref={hexaCV} position={hexaCVOut} name={"hexaCV"}
                                rotation={[-Math.PI / 2, 0, -3.14]}
                                scale={[-0.97, 0.42, -0.97]}
                                onPointerDown={(e) => {
                                    e.stopPropagation();
                                    activatec(e)
                                }}>
                    <Text fontSize={0.2} position={hexaNormalPos} rotation={hexaNormalRot}>
                        Curriculum
                    </Text>
                    <mesh geometry={nodes.Cylindre021.geometry} material={materials['Material.026']}/>
                    <mesh geometry={nodes.Cylindre021_1.geometry} material={materials['Material.025']}/>
                    <mesh geometry={nodes.Cylindre021_2.geometry} material={materials['Material.027']}/>
                </animated.group>
            </animated.group>

        </animated.group>
            </>
    )
}

useGLTF.preload('/8B2.glb')
